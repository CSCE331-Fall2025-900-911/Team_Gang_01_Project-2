SPECIAL Query 1 - weekly sales history
chosen by TA

SELECT 
    DATE_PART('week', placed_at) AS week_num,
    COUNT(*) AS amt_of_orders
FROM orders
GROUP BY 
    DATE_PART('week', placed_at)
ORDER BY week_num;

SPECIAL QUERY 2 - realistic sales history

    EXTRACT(HOUR FROM placed_at) AS order_hour,
    COUNT(*) AS num_orders,
    SUM(cost) AS total_revenue
FROM orders
GROUP BY order_hour
ORDER BY order_hour;


Special Query 3 - peak sales 
CHosen by TA

SELECT 
        order_date,
        SUM(COST) AS top_10_sum
FROM (  
        SELECT 
        placed_at::date AS order_date, 
        cost, 
        ROW_NUMBER() OVER (
        PARTITION BY placed_at::date
        ORDER BY cost DESC
        ) AS num
        FROM orders
) AS subquery
WHERE num <= 10
GROUP BY order_date
ORDER BY top_10_sum DESC;


menu item inventory - special query 4
SELECT 
   m.name,
   AVG(ingredients_used) AS avg_ingredients_used
FROM (
   SELECT
      orders.id,
      orders.menu_id,
      SUM(di.servings) AS ingredients_used
   FROM drinks_ingredients di
   JOIN drinks_orders orders ON di.drink_id = orders.id
   GROUP BY orders.id, orders.menu_id
) AS drink_ingredients_count 
JOIN menu m ON drink_ingredients_count.menu_id = m.id
GROUP BY m.name;

Special Query 5 
best of the worst

WITH week_orders AS (
    select 
        o.id,
        CAST(o.placed_at as DATE) as day,
        o.cost
    from orders o
    WHERE date_trunc('WEEK', o.placed_at) = date_trunc('WEEK', '2025-09-22'::DATE)
),
day_sales AS (
    SELECT wo.day, SUM(wo.cost) AS revenue
    FROM week_orders wo
    GROUP BY wo.day
),
lowest_day AS (
    SELECT ds.day, ds.revenue
    FROM day_sales ds
    ORDER BY ds.revenue ASC, day ASC
    LIMIT 1
),
top_seller AS (
    SELECT m.name AS drink, COUNT(*) AS num_sold
    FROM lowest_day ld
    JOIN week_orders   wo  ON wo.day = ld.day
    JOIN drinks_orders dro ON dro.order_id = wo.id
    JOIN menu          m   ON m.id = dro.menu_id
    GROUP BY m.name
    ORDER BY num_sold DESC, m.name
    LIMIT 1
)
SELECT 
    ld.day AS lowest_sales_day,
    ld.revenue AS revenue,
    ts.drink AS top_seller,
    ts.num_sold
FROM lowest_day ld
JOIN top_seller ts ON TRUE;

6. check item count
SELECT COUNT(*) AS number_of_menu_items FROM menu;

7. check yesterday sales
SELECT
  SUM(cost) AS yesterdays_sales
FROM
  orders
WHERE
  DATE(placed_at) = CURRENT_DATE - INTERVAL '1 day';

8. ccost from drink

SELECT orders.id, m.name, m.cost
FROM menu m
JOIN drinks_orders orders ON m.id = orders.menu_id

9. employee yesterdat
chosen by ta

SELECT employee_id,
       SUM(cost) as total_sales
FROM orders
WHERE DATE(placed_at) = CURRENT_DATE - INTERVAL '1 Day'
GROUP BY employee_id
ORDER BY total_sales DESC

10. Fetch drink ingredients
SELECT * FROM drinks_ingredients
WHERE drink_id = $1;

11. get last n day of sales
chosen by ta

SELECT * FROM orders
    WHERE placed_at BETWEEN CURRENT_DATE - INTERVAL '5 days' AND CURRENT_DATE;

12. Category drinks
SELECT * FROM menu
WHERE menu.category_id = $1

13. num orders by employee yesterdat
SELECT
    employee_id,
    COUNT(*) AS orders_taken
FROM
    orders
WHERE
    DATE(placed_at) = CURRENT_DATE - INTERVAL '1 day'
GROUP BY
    employee_id
ORDER BY
    orders_taken DESC;


14. sales by hour
SELECT DATE_TRUNC('hour', placed_at), SUM(cost) as sales
FROM orders
WHERE placed_at::DATE = CURRENT_DATE - 1
GROUP BY DATE_TRUNC('hour', placed_at);

15. time frame
chosen by ta

SELECT
    MIN(placed_at) AS first_sale_date,
    MAX(placed_at) AS last_sale_date,
    COUNT(DISTINCT DATE_TRUNC('week', placed_at)) AS total_weeks
FROM
    orders;

16. today so far sales
SELECT
  SUM(cost) AS today_so_far
FROM
  orders
WHERE
  DATE(placed_at) = CURRENT_DATE;

17.total sales

SELECT SUM(cost) AS total_sales FROM orders;

18. verify peak sales
chosen by ta

SELECT
    DATE(placed_at) AS sales_day,
    SUM(cost) AS daily_total
FROM
    orders
GROUP BY
    sales_day
ORDER BY
    daily_total DESC
LIMIT 10;
